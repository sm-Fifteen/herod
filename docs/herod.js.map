{"version":3,"sources":["app/app.js","app/ecu.js","app/geometry.js","app/ressources.js","app/table-attente.js"],"names":["app","module","window","DEBUG","setup","directive","$timeout","restrict","scope","link","element","generatePartitionLayout","champ","shape","layoutShapes","partition","cuts","forEach","cut","returnList","slice","table","points","push","partShape","idx","partObj","children","fillColor","couleur","debugTableAttente","paperShape","generateTable","regions","region","intersect","forIn","point","key","console","log","pointShape","Path","Circle","center","radius","pointText","PointText","content","fontFamily","fontWeight","fontSize","drawEcuOn","passedElement","ecu","PathItem","create","forme","fitBounds","view","bounds","clone","draw","onMouseDown","event","hitResult","project","hitTest","includes","item","$apply","selectedShape","$watch","newVal","oldVal","clear","selectedPart","selected","controller","$scope","Couleurs","couleurs","Partitions","partitions","find","elem","get","Ecu","formes","ecuFrancais","testPartitionGroup","undefined","ecartele","azur","sable","Geometry","paper","origin","lineEnd","lineStart","rotate","line","Line","hScale","vScale","width","Math","abs","x","height","y","scaleFactor","max","scale","extrapolateLine","map","getIntersections","sort","point1","point2","getDistance","divisionsPerAxis","stopsX","divideSurface","viewOrigin","topLeft","stopsY","divisionsNeeded","stopsNeeded","targetArea","area","tolerence","stops","left","stop","regionStart","estimateSize","maskSize","Size","i","divisionMask","Rectangle","Point","estimateArea","pathData","estimateError","right","intersections","from","top","to","bottom","normalWidth","reverse","pointsRef","add","cutPoint","getNearestLocation","curve","newPath","splitAt","length","join","closePath","R","sinople","pourpre","or","argent","divisionModel","axisAligned","aroundCenter","parti","nameFr","coupe","tranche","taille","ecarteleSautoir","tiercePairle","tiercePairleInv","TableAttente","generatePoints","generateRegions","divideSurface2D","edgeScan","pointChef","pointPointe","flancDextre","flancSenestre","chefDextre","pointeSenestre","chefSenestre","pointeDextre","abyme","regionMasks","y1","y2","j","x1","x2"],"mappings":"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","file":"docs/herod.js","sourcesContent":["import _ from \"lodash\";\nimport angular from \"angular\";\nimport \"angular-ui-bootstrap\";\nimport paper from \"paper\";\n\nimport R from \"ressources\";\nimport Ecu from \"ecu\";\nimport Geometry from \"geometry\";\nimport TableAttente from \"table-attente\";\n\nlet app = angular.module(\"herod\", [\"ui.bootstrap\"]);\n\nwindow.DEBUG = 0;\n\nwindow.setup = true;\n\napp.directive(\"ecuViewport\", [\"$timeout\", function ($timeout) {\n\treturn {\n\t\trestrict: \"A\",\n\t\tscope: true,\n\t\tlink: function (scope, element) {\n\t\t\tfunction generatePartitionLayout(champ, shape) {\n\t\t\t\tlet layoutShapes = [];\n\n\t\t\t\tchamp.partition.cuts.forEach(function (cut) {\n\t\t\t\t\t// TODO: destructure returnList\n\t\t\t\t\tlet returnList = Geometry.slice(paper, shape, cut, champ.table.points);\n\t\t\t\t\tlayoutShapes.push(returnList[1]);\n\t\t\t\t\tshape = returnList[0];\n\t\t\t\t});\n\n\t\t\t\tlayoutShapes.push(shape);\n\n\t\t\t\tlayoutShapes.forEach(function (partShape, idx){\n\t\t\t\t\tlet partObj = champ.children[idx];\n\t\t\t\t\tpartObj.shape = partShape;\n\t\t\t\t\tpartShape.fillColor = partObj.couleur;\n\t\t\t\t});\n\n\t\t\t\treturn layoutShapes;\n\t\t\t}\n\n\t\t\tfunction debugTableAttente(paperShape) {\n\t\t\t\tlet table = TableAttente.generateTable(paper, paperShape);\n\t\t\t\tlet regions = table.regions;\n\t\t\t\tlet points = table.points;\n\n\t\t\t\tregions.forEach(function (region, idx) {\n\t\t\t\t\tregion.intersect(paperShape).fillColor = '#'+idx*11+''+idx*11+''+idx*11;\n\t\t\t\t});\n\n\t\t\t\t_.forIn(points, function (point, key) {\n\t\t\t\t\tconsole.log(key + \" : \" + point);\n\t\t\t\t\tlet pointShape = new paper.Path.Circle({\n\t\t\t\t\t\tcenter: point,\n\t\t\t\t\t\tradius: 4,\n\t\t\t\t\t\tfillColor: 'red',\n\t\t\t\t\t});\n\t\t\t\t\tlet pointText = new paper.PointText({\n\t\t\t\t\t\tpoint: point,\n\t\t\t\t\t\tcontent: key,\n\t\t\t\t\t\tfillColor: 'red',\n\t\t\t\t\t\tfontFamily: 'Courier New',\n\t\t\t\t\t\tfontWeight: 'bold',\n\t\t\t\t\t\tfontSize: 12,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction drawEcuOn(passedElement) {\n\t\t\t\tif (window.setup) {\n\t\t\t\t\tpaper.setup(passedElement);\n\t\t\t\t\tdelete window.setup;\n\t\t\t\t}\n\n\t\t\t\tif (scope.ecu) {\n\t\t\t\t\tlet shape = paper.PathItem.create(scope.ecu.forme);\n\t\t\t\t\tshape.fitBounds(paper.view.bounds);\n\n\t\t\t\t\tif (!scope.ecu.champ.table) {\n\t\t\t\t\t\t// TODO : Use a watch on ecu.forme instead\n\t\t\t\t\t\tscope.ecu.champ.table = TableAttente.generateTable(paper, shape);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.ecu.layoutShapes = generatePartitionLayout(scope.ecu.champ, shape.clone());\n\t\t\t\t\tconsole.log(scope.ecu.layoutShapes);\n\n\t\t\t\t\t// debugTableAttente(shape);\n\t\t\t\t}\n\n\t\t\t\tpaper.view.draw();\n\t\t\t}\n\n\t\t\t// Timeout with 0 delay, to wait for the DOM to render.\n\t\t\t$timeout(drawEcuOn(element[0]), 0);\n\n\t\t\tpaper.view.onMouseDown = function (event) {\n\t\t\t\tvar hitResult = paper.project.hitTest(event.point);\n\n\t\t\t\tif (hitResult && _.includes(scope.ecu.layoutShapes, hitResult.item)) {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.ecu.selectedShape = hitResult.item;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tscope.$watch(\"ecu.champ.partition\", function (newVal, oldVal) {\n\t\t\t\tif(newVal === oldVal) return;\n\n\t\t\t\t// Redraw the whole thing on partition change\n\t\t\t\tpaper.project.clear();\n\t\t\t\tdrawEcuOn(element[0]);\n\n\t\t\t\tif (scope.ecu.selectedPart) {\n\t\t\t\t\tscope.ecu.selectedShape = scope.ecu.selectedPart.shape;\n\t\t\t\t\tscope.ecu.selectedShape.selected = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n\napp.controller(\"EcuCtrl\", function($scope) {\n\t$scope.Couleurs = R.couleurs;\n\t$scope.Partitions = R.partitions;\n\n\t$scope.ecu = new Ecu();\n\n\t$scope.$watch(\"ecu.selectedShape\", function(newVal, oldVal) {\n\t\tif (!newVal) return; // Might be undefined when starting up\n\t\tif (oldVal) oldVal.selected = false;\n\t\tnewVal.selected = true;\n\n\t\t$scope.ecu.selectedPart = _.find($scope.ecu.champ.children, function (elem) {\n\t\t\treturn elem.shape === newVal;\n\t\t});\n\t});\n\n\t$scope.$watch(\"ecu.selectedPart.couleur\", function (newVal) {\n\t\t// If selecedPart is empty, an object is created by angular with no associated shape\n\t\tif (_.get($scope.ecu.selectedPart, \"shape\")) {\n\t\t\t$scope.ecu.selectedPart.shape.fillColor = newVal;\n\t\t}\n\t});\n});\n","import R from \"ressources\";\n\nclass Ecu {\n\tconstructor() {\n\t\tthis.forme = R.formes.ecuFrancais;\n\t\tthis.champ = Ecu.testPartitionGroup;\n\n\t\tthis.selectedShape = undefined; // A paper shape, added by the directive\n\t\tthis.selectedPart = undefined; // The partition represented by that shape, added by the controller\n\t}\n}\n\nEcu.testPartitionGroup = {\n\tpartition: R.partitions.ecartele,\n\t// table: new TableAttente(),\n\tchildren: [\n\t\t{couleur: R.couleurs.azur},\n\t\t{couleur: R.couleurs.sable},\n\t\t{couleur: R.couleurs.sable},\n\t\t{couleur: R.couleurs.azur},\n\t],\n};\n\nexport default Ecu;\n","import _ from \"lodash\";\n\nclass Geometry {\n \tstatic extrapolateLine(paper, paperShape, origin, lineEnd) {\n\t\tlet lineStart = lineEnd.clone().rotate(180, origin);\n\t\tlet line = new paper.Path.Line(lineEnd, lineStart);\n\n\t\tlet hScale = 0, vScale = 0;\n\n\t\tif (line.bounds.width >= 1) {\n\t\t\thScale = (paperShape.bounds.width + Math.abs(paperShape.bounds.center.x - origin.x) * 2) / line.bounds.width;\n\t\t}\n\n\t\tif (line.bounds.height >= 1) {\n\t\t\tvScale = (paperShape.bounds.height + Math.abs(paperShape.bounds.center.y - origin.y) * 2) / line.bounds.height;\n\t\t}\n\n\t\tlet scaleFactor = Math.max(hScale, vScale);\n\t\treturn line.scale(scaleFactor, origin);\n\t}\n\n\tstatic edgeScan(paper, paperShape, origin, lineEnd) {\n\t\tlet line = this.extrapolateLine(paper, paperShape, origin, lineEnd);\n\n\t\t// Return in order of the line's direction\n\t\treturn _.map(paperShape.getIntersections(line), \"point\").sort(function (point1, point2) {\n\t\t\treturn lineEnd.getDistance(point2) - lineEnd.getDistance(point1);\n\t\t});\n\t}\n\n\tstatic divideSurface2D(paper, paperShape, divisionsPerAxis) {\n\t\t// TODO: StopFinder is wrong, and doesn't actually create 9 equal shapes like we need.\n\n\t\tlet stopsX = this.divideSurface(paper, paperShape, divisionsPerAxis);\n\t\t// Flip the shape to get the Y axis\n\t\tlet viewOrigin = paper.view.bounds.topLeft;\n\t\tpaperShape.scale(1, -1, viewOrigin).rotate(90, viewOrigin);\n\n\t\tlet stopsY = this.divideSurface(paper, paperShape, divisionsPerAxis);\n\t\tpaperShape.scale(1, -1, viewOrigin).rotate(90, viewOrigin);\n\n\t\treturn {x: stopsX, y: stopsY};\n\t}\n\n\tstatic divideSurface(paper, paperShape, divisionsNeeded) {\n\t\tlet stopsNeeded = divisionsNeeded - 1;\n\t\tlet targetArea = Math.abs(paperShape.area / divisionsNeeded); // Area may be negative (??)\n\t\tlet tolerence = targetArea / 200;\n\t\tlet stops = [paperShape.bounds.left];\n\n\t\tfor (let stop = 1; stop <= stopsNeeded; stop++) {\n\t\t\tlet regionStart = stops[stop - 1];\n\t\t\t// We divide in 3, find the first stop, then the rest in half and find the second stop.\n\t\t\tlet estimateSize = paperShape.bounds.width / (divisionsNeeded - stop + 1);\n\t\t\tlet maskSize = new paper.Size(estimateSize, paperShape.bounds.height);\n\n\t\t\tlet i = 0;\n\t\t\twhile (true) {\n\t\t\t\tlet divisionMask = new paper.Path.Rectangle(new paper.Point(regionStart, paperShape.bounds.y), maskSize);\n\t\t\t\tlet estimateArea = (new paper.Path(divisionMask.intersect(paperShape).pathData)).area;\n\t\t\t\tlet estimateError = targetArea - estimateArea;\n\n\t\t\t\tif (Math.abs(estimateError) < tolerence) {\n\t\t\t\t\tstops[stop] = divisionMask.bounds.right;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Measure the cross-section width/height of our shape\n\t\t\t\tlet intersections = paperShape.getIntersections(new paper.Path.Line({\n\t\t\t\t\t// We seek along the x axis, so the limit of our estimate is always on the right\n\t\t\t\t\tfrom: [divisionMask.bounds.right, paperShape.bounds.top],\n\t\t\t\t\tto: [divisionMask.bounds.right, paperShape.bounds.bottom],\n\t\t\t\t}));\n\n\t\t\t\tlet normalWidth = intersections[0].point.getDistance(intersections.reverse()[0].point);\n\t\t\t\tmaskSize.width += (estimateError/normalWidth) / 2;\n\t\t\t}\n\t\t\tstops[stopsNeeded + 1] = paperShape.bounds.right;\n\t\t}\n\n\t\treturn stops;\n\t}\n\n\tstatic slice(paper, paperShape, cut, pointsRef) {\n\t\tlet line = new paper.Path();\n\n\t\tcut.forEach(cutPoint => line.add(pointsRef[cutPoint]));\n\n\t\tlet intersections = [\n\t\t\tpaperShape.getNearestLocation(pointsRef[cut[0]]),\n\t\t\tpaperShape.getNearestLocation(pointsRef[cut.reverse()[0]]),\n\t\t];\n\n\t\tlet curve = intersections[1].curve;\n\t\tlet newPath = curve.splitAt(intersections[1]);\n\n\t\t// Path is open but hasn't been split in 2\n\t\tif (newPath === paperShape) {\n\t\t\tcurve = intersections[0].curve;\n\t\t\tnewPath = curve.splitAt(intersections[0]);\n\t\t}\n\n\t\t// First is the leftover paperShape, second is the piece we wanted\n\t\t// The one that fills the inside of our intersections is our piece.\n\t\t// For simplicity's sake, we use path length to guess that.\n\n\t\tlet returnList = [paperShape, newPath];\n\t\tif (paperShape.length < newPath.length) {\n\t\t\treturnList = [newPath, paperShape];\n\t\t}\n\n\t\tpaperShape.join(line.clone(), 5);\n\t\tpaperShape.closePath();\n\t\tnewPath.join(line.clone(), 5);\n\t\tnewPath.closePath();\n\n\t\treturn returnList;\n\t}\n}\n\nexport default Geometry;\n","let R = {\n\tformes: {\n\t\tecuFrancais: \"M0,0 L0,50 Q0,80 50,110 Q100,80 100,50 L100,0 z\",\n\t},\n\n\tcouleurs: {\n\t\tazur: \"#2b5df2\",\n\t\tsable: \"#000000\",\n\t\tsinople: \"#5ab532\",\n\t\tpourpre: \"#d576ad\",\n\t\tor: \"#fcef3c\",\n\t\targent: \"#ffffff\",\n\t},\n\n\tdivisionModel: {\n\t\taxisAligned: \"stripes\",\n\t\taroundCenter: \"slices\",\n\t},\n\n\t// divisionModel + nbDivisions + rotation\n\t// partGroup = new Partition.Tierce.Pal()\n\n\tpartitions: {\n\t\tparti: {\n\t\t\tcuts: [\n\t\t\t\t[\"pointChef\", \"pointPointe\"],\n\t\t\t],\n\t\t\tnameFr: [\"Parti\"],\n\t\t},\n\t\tcoupe: {\n\t\t\tcuts: [\n\t\t\t\t[\"flancDextre\", \"flancSenestre\"],\n\t\t\t],\n\t\t\tnameFr: [\"Coupé\"],\n\t\t},\n\t\ttranche: {\n\t\t\tcuts: [\n\t\t\t\t[\"chefDextre\", \"pointeSenestre\"],\n\t\t\t],\n\t\t\tnameFr: [\"Tranché\"],\n\t\t},\n\t\ttaille: {\n\t\t\tcuts: [\n\t\t\t\t[\"chefSenestre\", \"pointeDextre\"],\n\t\t\t],\n\t\t\tnameFr: [\"Taillé\"],\n\t\t},\n\t\tecartele: {\n\t\t\tcuts: [\n\t\t\t\t[\"flancDextre\", \"abyme\", \"pointChef\"],\n\t\t\t\t[\"pointChef\", \"abyme\", \"flancSenestre\"],\n\t\t\t\t[\"flancDextre\", \"abyme\", \"pointPointe\"],\n\t\t\t],\n\t\t},\n\t\tecarteleSautoir: {\n\t\t\tcuts: [\n\t\t\t\t[\"chefDextre\", \"abyme\", \"chefSenestre\"],\n\t\t\t\t[\"chefDextre\", \"abyme\", \"pointeDextre\"],\n\t\t\t\t[\"chefSenestre\", \"abyme\", \"pointeSenestre\"],\n\t\t\t],\n\t\t},\n\t\ttiercePairle: {\n\t\t\tcuts: [\n\t\t\t\t[\"chefDextre\", \"abyme\", \"chefSenestre\"],\n\t\t\t\t[\"chefDextre\", \"abyme\", \"pointPointe\"],\n\t\t\t\t[\"chefSenestre\", \"abyme\", \"pointPointe\"],\n\t\t\t],\n\t\t},\n\t\ttiercePairleInv: {\n\t\t\tcuts: [\n\t\t\t\t[\"pointeDextre\", \"abyme\", \"pointChef\"],\n\t\t\t\t[\"pointeSenestre\", \"abyme\", \"pointChef\"],\n\t\t\t\t[\"pointeDextre\", \"abyme\", \"pointeSenestre\"],\n\t\t\t],\n\t\t},\n\t},\n};\n\nexport default R;\n","import Geometry from \"geometry\"\n\nclass TableAttente {\n\tconstructor(points, regions) {\n\t\tthis.points = points;\n\t\tthis.regions = regions;\n\t\t// this.directions = {};\n\t}\n\n\tstatic generateTable(paper, paperShape) {\n\t\treturn new TableAttente(\n\t\t\tTableAttente.generatePoints(paper, paperShape),\n\t\t\tTableAttente.generateRegions(paper, paperShape)\n\t\t);\n\t}\n\n\tstatic generatePoints(paper, paperShape) {\n\t\tlet stops = Geometry.divideSurface2D(paper, paperShape, 2);\n\n\t\tlet center = new paper.Point(stops.x[1], stops.y[1]);\n\n\t\tlet parti = Geometry.edgeScan(paper, paperShape, center, new paper.Point(stops.x[1], stops.y[2]));\n\t\tlet coupe = Geometry.edgeScan(paper, paperShape, center, new paper.Point(stops.x[2], stops.y[1]));\n\t\tlet tranche = Geometry.edgeScan(paper, paperShape, new paper.Point(stops.x[0], stops.y[0]), center);\n\t\tlet taille = Geometry.edgeScan(paper, paperShape, new paper.Point(stops.x[2], stops.y[0]), center);\n\n\t\treturn {\n\t\t\tpointChef: parti[0],\n\t\t\tpointPointe: parti.reverse()[0],\n\n\t\t\t// Dexter and Sinister are the left and right of the bearer.\n\t\t\t// They are reversed here.\n\t\t\tflancDextre: coupe[0],\n\t\t\tflancSenestre: coupe.reverse()[0],\n\t\t\tchefDextre: tranche[0],\n\t\t\tpointeSenestre: tranche.reverse()[0],\n\t\t\tchefSenestre: taille[0],\n\t\t\tpointeDextre: taille.reverse()[0],\n\n\t\t\tabyme: center,\n\t\t};\n\t}\n\n\tstatic generateRegions(paper, paperShape) {\n\t\tlet divisionsPerAxis = 3;\n\t\tlet stops = Geometry.divideSurface2D(paper, paperShape, divisionsPerAxis);\n\n\t\tlet regionMasks = [];\n\t\tfor (let i = 0; i < divisionsPerAxis; i++) {\n\t\t\tlet y1 = stops.y[i], y2 = stops.y[i + 1];\n\n\t\t\tfor (let j = 0; j < divisionsPerAxis; j++) {\n\t\t\t\tlet x1 = stops.x[j], x2 = stops.x[j + 1];\n\n\t\t\t\tregionMasks.push(new paper.Path.Rectangle({\n\t\t\t\t\tfrom: [x1, y1],\n\t\t\t\t\tto: [x2, y2],\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\treturn regionMasks;\n\t}\n}\n\nexport default TableAttente;\n"]}